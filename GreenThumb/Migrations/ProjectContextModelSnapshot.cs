// <auto-generated />
using System;
using GreenThumb.Models;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace GreenThumb.Migrations
{
    [DbContext(typeof(ProjectContext))]
    partial class ProjectContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.1")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("GreenThumb.Models.DailyLog", b =>
                {
                    b.Property<int>("DailyLogId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("DailyLogId"));

                    b.Property<DateOnly>("Date")
                        .HasColumnType("date");

                    b.HasKey("DailyLogId");

                    b.ToTable("DailyLogs");

                    b.HasData(
                        new
                        {
                            DailyLogId = 1,
                            Date = new DateOnly(2024, 1, 31)
                        });
                });

            modelBuilder.Entity("GreenThumb.Models.StatusReport", b =>
                {
                    b.Property<int>("StatusReportId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("StatusReportId"));

                    b.Property<int>("DailyLogId")
                        .HasColumnType("int");

                    b.Property<float?>("ElectricalConductivity")
                        .HasColumnType("real");

                    b.Property<float?>("Humidity")
                        .HasColumnType("real");

                    b.Property<float?>("PH")
                        .HasColumnType("real");

                    b.Property<float?>("PartsPerMillion")
                        .HasColumnType("real");

                    b.Property<float?>("Temperature")
                        .HasColumnType("real");

                    b.Property<TimeOnly>("Time")
                        .HasColumnType("time");

                    b.HasKey("StatusReportId");

                    b.ToTable("StatusReports");

                    b.HasData(
                        new
                        {
                            StatusReportId = 1,
                            DailyLogId = 1,
                            ElectricalConductivity = 128f,
                            Humidity = 60f,
                            PH = 7.2f,
                            PartsPerMillion = 10f,
                            Temperature = 29f,
                            Time = new TimeOnly(0, 0, 0)
                        },
                        new
                        {
                            StatusReportId = 2,
                            DailyLogId = 1,
                            ElectricalConductivity = 128f,
                            Humidity = 62f,
                            PH = 7.1f,
                            PartsPerMillion = 10f,
                            Temperature = 22.5f,
                            Time = new TimeOnly(1, 0, 0)
                        },
                        new
                        {
                            StatusReportId = 3,
                            DailyLogId = 1,
                            ElectricalConductivity = 128f,
                            Humidity = 64.5f,
                            PH = 7.2f,
                            PartsPerMillion = 10f,
                            Temperature = 20.1f,
                            Time = new TimeOnly(2, 0, 0)
                        });
                });
#pragma warning restore 612, 618
        }
    }
}
